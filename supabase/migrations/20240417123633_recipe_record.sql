create table "public"."recipe_record" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "quantity" numeric not null,
    "recipe_id" bigint not null,
    "inventory_id" bigint not null
);

alter table "public"."recipe_record" enable row level security;

CREATE UNIQUE INDEX recipe_record_pkey ON public.recipe_record USING btree (id);

alter table "public"."recipe_record" add constraint "recipe_record_pkey" PRIMARY KEY using index "recipe_record_pkey";

alter table "public"."recipe_record" add constraint "recipe_record_inventory_id_fkey" FOREIGN KEY (inventory_id) REFERENCES inventory(id) not valid;

alter table "public"."recipe_record" validate constraint "recipe_record_inventory_id_fkey";

alter table "public"."recipe_record" add constraint "recipe_record_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES recipe(id) not valid;

alter table "public"."recipe_record" validate constraint "recipe_record_recipe_id_fkey";

CREATE POLICY "Admin can do whatever, within company"
ON public.recipe_record 
as permissive
for all
to authenticated
USING (( SELECT worker_for_current_user.is_admin
   FROM worker_for_current_user) AND (EXISTS ( SELECT 1 FROM public.recipe r WHERE (
        (r.company_id = ( SELECT current_company_id.id FROM public.current_company_id)) AND 
        (r.id = recipe_record.recipe_id)))));